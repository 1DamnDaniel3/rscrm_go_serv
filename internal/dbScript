CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- 1. Школы танцев
CREATE TABLE schools (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  city TEXT,
  phone TEXT,
  email TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);

-- 2. Пользователи системы
CREATE TABLE user_accounts (
  id SERIAL PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL,
  role TEXT CHECK (role IN ('admin', 'manager', 'teacher', 'receptionist', 'accountant', 'owner')) DEFAULT 'owner',
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE user_profiles (
  id SERIAL PRIMARY KEY,
  account_id INTEGER REFERENCES user_accounts(id) ON DELETE CASCADE,
  phone TEXT,
  full_name TEXT,
  birthdate DATE
);

-- 3. Справочники
CREATE TABLE sources (
  id SERIAL PRIMARY KEY,
  name TEXT
);
-- статусы (для lead - по воронке продаж, для student - для потеряшек)
CREATE TABLE statuses (
  id SERIAL PRIMARY KEY,
  name TEXT,
  type TEXT,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 4. Клиенты и лиды
CREATE TABLE leads (
  id SERIAL PRIMARY KEY,
  name TEXT,
  phone TEXT,
  source_id INTEGER REFERENCES sources(id) ON DELETE SET NULL,
  status_id INTEGER REFERENCES statuses(id),
  trial_date DATE,
  qualification TEXT,
  created_by INTEGER REFERENCES user_accounts(id) ON DELETE SET NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  converted_to_client_at TIMESTAMP,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE clients (
  id SERIAL PRIMARY KEY,
  name TEXT,
  phone TEXT,
  birthdate DATE,
  contact TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 5. Ученики
CREATE TABLE students (
  id SERIAL PRIMARY KEY,
  name TEXT,
  birthdate DATE,
  skill_level VARCHAR(8) CHECK (skill_level IN ('beginner', 'middle', 'pro')), -- новый столбец
  contact TEXT, -- новый столбец
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE student_clients (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
  is_payer BOOLEAN DEFAULT TRUE,
  relation TEXT,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 6. Абонементы
CREATE TABLE subscriptions (
  id SERIAL PRIMARY KEY,
  name TEXT,
  price NUMERIC,
  visit_limit INTEGER,
  active_from DATE,
  active_to DATE,
  is_archived BOOLEAN DEFAULT FALSE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE student_subscriptions (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  subscription_id INTEGER REFERENCES subscriptions(id) ON DELETE CASCADE,
  issued_at DATE,
  expires_at DATE,
  remaining_visits INTEGER,
  is_active BOOLEAN,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE subscription_pauses (
  id SERIAL PRIMARY KEY,
  student_subscription_id INTEGER REFERENCES student_subscriptions(id) ON DELETE CASCADE,
  paused_from DATE,
  paused_to DATE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 7. Группы
CREATE TABLE groups (
  id SERIAL PRIMARY KEY,
  name TEXT,
  entity_type TEXT CHECK (entity_type IN ('lead', 'student', 'client')),
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE lead_groups (
  id SERIAL PRIMARY KEY,
  lead_id INTEGER REFERENCES leads(id) ON DELETE CASCADE,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE client_groups (
  id SERIAL PRIMARY KEY,
  client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE student_groups (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 8. Направления танцев
CREATE TABLE dance_styles (
  id SERIAL PRIMARY KEY,
  name TEXT,
  active_from DATE,
  active_to DATE,
  is_archived BOOLEAN DEFAULT FALSE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 9. Расписание
CREATE TABLE schedules (
  id SERIAL PRIMARY KEY,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  direction_id INTEGER REFERENCES dance_styles(id) ON DELETE SET NULL,
  teacher_id INTEGER REFERENCES user_accounts(id) ON DELETE SET NULL,
  weekday INTEGER,
  start_time TIME,
  duration_minutes INTEGER,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
  active_from DATE,
  active_to DATE
);

-- 10. Занятия
CREATE TABLE lessons (
  id SERIAL PRIMARY KEY,
  group_id INTEGER REFERENCES groups(id) ON DELETE CASCADE,
  direction_id INTEGER REFERENCES dance_styles(id) ON DELETE SET NULL,
  teacher_id INTEGER REFERENCES user_accounts(id) ON DELETE SET NULL,
  lesson_date DATE,
  start_time TIME,
  duration_minutes INTEGER,
  is_canceled BOOLEAN DEFAULT FALSE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
  UNIQUE(school_id, lesson_date, start_time, group_id)

);

-- 11. Посещаемость
CREATE TABLE attendance (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  lesson_id INTEGER REFERENCES lessons(id) ON DELETE CASCADE,
  status TEXT CHECK (status IN ('presence', 'absent', 'sick')),
  marked_by INTEGER REFERENCES user_accounts(id) ON DELETE SET NULL,
  marked_at TIMESTAMP,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 12. Платежи
CREATE TABLE payments (
  id SERIAL PRIMARY KEY,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  subscription_id INTEGER REFERENCES subscriptions(id) ON DELETE CASCADE,
  amount NUMERIC,
  paid_at TIMESTAMP,
  created_by INTEGER REFERENCES user_accounts(id) ON DELETE SET NULL,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE lesson_payments (
  id SERIAL PRIMARY KEY,
  lesson_id INTEGER REFERENCES lessons(id) ON DELETE CASCADE,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  amount NUMERIC,
  paid_at TIMESTAMP,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 13. Финансовые отчеты
CREATE TABLE financial_reports (
  id SERIAL PRIMARY KEY,
  period_start DATE,
  period_end DATE,
  total_income NUMERIC,
  total_expenses NUMERIC,
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 14. Привязка занятий к абонементам
CREATE TABLE lesson_subscriptions (
  id SERIAL PRIMARY KEY,
  lesson_id INTEGER REFERENCES lessons(id) ON DELETE CASCADE,
  student_id INTEGER REFERENCES students(id) ON DELETE CASCADE,
  subscription_id INTEGER REFERENCES student_subscriptions(id) ON DELETE CASCADE,
  used_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

-- 15. Оплата тренерам
CREATE TABLE teacher_rate_policies (
  id SERIAL PRIMARY KEY,
  name TEXT,
  description TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE teacher_rates (
  id SERIAL PRIMARY KEY,
  teacher_id INTEGER REFERENCES user_accounts(id) ON DELETE CASCADE,
  policy_id INTEGER REFERENCES teacher_rate_policies(id) ON DELETE CASCADE,
  active_from DATE,
  active_to DATE,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);

CREATE TABLE teacher_rate_rules (
  id SERIAL PRIMARY KEY,
  policy_id INTEGER REFERENCES teacher_rate_policies(id) ON DELETE CASCADE,
  rule_type TEXT CHECK (
    rule_type IN ('fixed', 'per_lesson', 'per_student', 'threshold', 'percent')
  ),
  threshold INTEGER,
  base_amount NUMERIC,
  per_student NUMERIC,
  percent_of_income NUMERIC,
  school_id UUID REFERENCES schools(id) ON DELETE CASCADE
);


---------------------------------------------------- Индексы --------------------------------------------


--- Индексы для внешних ключей (если они не создаются автоматически)
CREATE INDEX idx_user_accounts_school_id ON user_accounts(school_id);
CREATE INDEX idx_statuses_school_id ON statuses(school_id); 
CREATE INDEX idx_leads_school_id ON leads(school_id);
CREATE INDEX idx_clients_school_id ON clients(school_id);
CREATE INDEX idx_students_school_id ON students(school_id);
CREATE INDEX idx_student_clients_school_id ON student_clients(school_id);
CREATE INDEX idx_subscriptions_school_id ON subscriptions(school_id);
CREATE INDEX idx_student_subscriptions_school_id ON student_subscriptions(school_id);
CREATE INDEX idx_groups_school_id ON groups(school_id);
CREATE INDEX idx_lead_groups_school_id ON lead_groups(school_id);
CREATE INDEX idx_client_groups_school_id ON client_groups(school_id);
CREATE INDEX idx_student_groups_school_id ON student_groups(school_id);
CREATE INDEX idx_dance_styles_school_id ON dance_styles(school_id);
CREATE INDEX idx_schedules_school_id ON schedules(school_id);
CREATE INDEX idx_lessons_school_id ON lessons(school_id);
CREATE INDEX idx_attendance_school_id ON attendance(school_id);
CREATE INDEX idx_payments_school_id ON payments(school_id);
CREATE INDEX idx_lesson_payments_school_id ON lesson_payments(school_id);
CREATE INDEX idx_financial_reports_school_id ON financial_reports(school_id);
CREATE INDEX idx_lesson_subscriptions_school_id ON lesson_subscriptions(school_id);
CREATE INDEX idx_teacher_rate_policies_school_id ON teacher_rate_policies(school_id);
CREATE INDEX idx_teacher_rates_school_id ON teacher_rates(school_id);
CREATE INDEX idx_teacher_rate_rules_policy_id ON teacher_rate_rules(policy_id);

-- Индексы по внешним ключам к другим таблицам
CREATE INDEX idx_user_profiles_account_id ON user_profiles(account_id);
CREATE INDEX idx_leads_source_id ON leads(source_id);
CREATE INDEX idx_leads_status_id ON leads(status_id);
CREATE INDEX idx_leads_created_by ON leads(created_by);
CREATE INDEX idx_student_clients_student_id ON student_clients(student_id);
CREATE INDEX idx_student_clients_client_id ON student_clients(client_id);
CREATE INDEX idx_student_subscriptions_student_id ON student_subscriptions(student_id);
CREATE INDEX idx_student_subscriptions_subscription_id ON student_subscriptions(subscription_id);
CREATE INDEX idx_subscription_pauses_student_subscription_id ON subscription_pauses(student_subscription_id);
CREATE INDEX idx_lead_groups_lead_id ON lead_groups(lead_id);
CREATE INDEX idx_lead_groups_group_id ON lead_groups(group_id);
CREATE INDEX idx_client_groups_client_id ON client_groups(client_id);
CREATE INDEX idx_client_groups_group_id ON client_groups(group_id);
CREATE INDEX idx_student_groups_student_id ON student_groups(student_id);
CREATE INDEX idx_student_groups_group_id ON student_groups(group_id);
CREATE INDEX idx_schedules_group_id ON schedules(group_id);
CREATE INDEX idx_lessons_group_id ON lessons(group_id);
CREATE INDEX idx_lessons_direction_id ON lessons(direction_id);
CREATE INDEX idx_lessons_teacher_id ON lessons(teacher_id);
CREATE INDEX idx_attendance_student_id ON attendance(student_id);
CREATE INDEX idx_attendance_lesson_id ON attendance(lesson_id);
CREATE INDEX idx_attendance_marked_by ON attendance(marked_by);
CREATE INDEX idx_payments_student_id ON payments(student_id);
CREATE INDEX idx_payments_subscription_id ON payments(subscription_id);
CREATE INDEX idx_payments_created_by ON payments(created_by);
CREATE INDEX idx_lesson_payments_lesson_id ON lesson_payments(lesson_id);
CREATE INDEX idx_lesson_payments_student_id ON lesson_payments(student_id);
CREATE INDEX idx_lesson_subscriptions_lesson_id ON lesson_subscriptions(lesson_id);
CREATE INDEX idx_lesson_subscriptions_student_id ON lesson_subscriptions(student_id);
CREATE INDEX idx_lesson_subscriptions_subscription_id ON lesson_subscriptions(subscription_id);
CREATE INDEX idx_teacher_rates_teacher_id ON teacher_rates(teacher_id);
CREATE INDEX idx_teacher_rates_policy_id ON teacher_rates(policy_id);

-- Уникальный индекс уже есть на user_accounts.email

-- Индексы по часто используемым фильтрам
CREATE INDEX idx_leads_phone ON leads(phone);
CREATE INDEX idx_clients_phone ON clients(phone);
CREATE INDEX idx_students_birthdate ON students(birthdate);
CREATE INDEX idx_lessons_start_time ON lessons(start_time);



----------------------------------------------------- ДАМП заполнения --------------------------
DO $$
DECLARE 
school_id UUID;
BEGIN
-- Школы танцев
INSERT INTO schools (name, city, phone, email, created_at) VALUES
('Right Step RnD', 'Ростов-на-Дону', '89009009090', 'ownerSchool@gmail.com', NOW())
RETURNING id INTO school_id;

-- Пользователи системы
INSERT INTO user_accounts (email, password, role, created_at, school_id) VALUES
('admin@gmail.com', '$2a$10$FlEeydohowlZtkt.fcN4Leit1lA2gfYcJ44hWvBH/TtDASQzqf8mK', 'admin', NOW(), null),
('owner@gmail.com', '$2a$10$d8REo8wDZUsvfEEUtLM9oeEQ7963bF4VsyFrSsG3Wjt0xdC9DMksO', 'owner', NOW(), school_id),
('manager@gmail.com', '$2a$10$aQ2qfd/lc.lj14q2IFPml.3RyUfD3EGWJla9R66JDpGtFC0aoFf16', 'manager', NOW(), school_id),
('teacher@gmail.com', '$2a$10$uWLa7aKUbBiDoe0AdrUzWu.es3Z10xoMb3aJyNikn2i6T2qBzcmVm', 'teacher', NOW(), school_id),
('accountant@gmail.com', '$2a$10$8X3grbQVWyLHvZbPbIf4ve5ZFCLUN0LGnRPVvJs7aJmIiBigtFT2q', 'accountant', NOW(), school_id),
('receptionist@gmail.com', '$2a$10$0EdbnGzRRUpkzWGfRQRwBuFlVMwA6W4GoAb8beIBPdhCIWgklef86', 'receptionist', NOW(), school_id);

INSERT INTO user_profiles (account_id, phone, full_name, birthdate) VALUES
(1, '+7 (900) 900-9090', 'Admin', '2025-05-24'),
(2, '+7 (900) 901-9191', 'Owner', '2025-05-24'),
(3, '+7 (900) 902-9292', 'Manager', '2025-05-24'),
(4, '+7 (900) 903-9393', 'Teacher', '2025-05-24'),
(5, '+7 (900) 904-9494', 'Accountant', '2025-05-24'),
(6, '+7 (900) 905-9595', 'Receptionist', '2025-05-24');

-- Виды продвижения
INSERT INTO sources (name) VALUES
('Instagram'),
('Рекомендации'),
('Реклама Google'),
('ВКонтакте'),
('TikTok'),
('Сайт школы'),
('Яндекс.Директ'),
('Уличная реклама'),
('Реклама в ТЦ'),
('Реклама в лифтах'),
('Флаеры'),
('Открытые уроки'),
('Пробные занятия'),
('Мероприятия и фестивали'),
('Сарафанное радио');

-- Статусы лидов
INSERT INTO statuses (name, type, school_id) VALUES
('Новый', 'lead', school_id),
('В обработке', 'lead', school_id),
('Записан на пробное', 'lead', school_id),
('Клиент', 'lead', school_id),
('Активный', 'student', school_id),
('Архивный', 'student', school_id);

-- Лиды
INSERT INTO leads (name, phone, source_id, status_id, trial_date, qualification, created_by, created_at, converted_to_client_at, school_id) VALUES
('Петрова Анна', '+7 (999) 555-1122', 1, 3, '2025-05-20', 'горячий', 2, NOW(), NULL, school_id);

-- Клиенты
INSERT INTO clients (name, phone, birthdate, contact, created_at, school_id) VALUES
('Петров Андрей', '+7 (999) 555-3344', '1990-12-15', 'папа ученицы', NOW(), school_id),
('Петрова Анна', '+7 (999) 555-1122', '1990-03-15', 'мама ученицы', NOW(), school_id);

-- Ученики
INSERT INTO students (name, birthdate, skill_level, contact, created_at, school_id) VALUES
('Петрова Мария', '2015-06-10', 'beginner', '@petrova', NOW(), school_id);

-- Связь учеников и клиентов
INSERT INTO student_clients (student_id, client_id, is_payer, relation, school_id) VALUES
(1, 1, true, 'папа', school_id),
(1, 2, false, 'мама', school_id);

-- Абонементы
INSERT INTO subscriptions (name, price, visit_limit, active_from, active_to, is_archived, school_id) VALUES
('Пробный', 500, 1, '2025-01-01', '2025-12-31', false, school_id),
('8 занятий', 4000, 8, '2025-01-01', '2025-12-31', false, school_id);

-- Абонементы учеников
INSERT INTO student_subscriptions (student_id, subscription_id, issued_at, expires_at, remaining_visits, is_active, school_id) VALUES
(1, 1, NOW(), '2025-06-01', 1, true, school_id);

-- Заморозки
INSERT INTO subscription_pauses (student_subscription_id, paused_from, paused_to, school_id) VALUES
(1, '2025-05-10', '2025-05-15', school_id);

-- Группы
INSERT INTO groups (name, entity_type, created_at, school_id) VALUES
('Группа для новичков', 'student', NOW(), school_id);

-- Участие в группах
INSERT INTO student_groups (student_id, group_id, school_id) VALUES
(1, 1, school_id);

-- Расписание
INSERT INTO schedules (group_id, weekday, start_time, duration_minutes, school_id, active_from, active_to) VALUES
(1, 2, '18:00', 60, school_id, '2025-01-01', '2025-12-31');

-- Направления
INSERT INTO dance_styles (name, active_from, active_to, is_archived, school_id) VALUES
('Современные танцы', '2025-01-01', '2025-12-31', false, school_id);

-- Занятия
INSERT INTO lessons (group_id, direction_id, teacher_id, start_time, duration_minutes, is_canceled, school_id) VALUES
(1, 1, 3, '2025-05-15 18:00', 60, false, school_id);

-- Использование абонементов
INSERT INTO lesson_subscriptions (lesson_id, student_id, subscription_id, used_at, school_id) VALUES
(1, 1, 1, '2025-05-15 18:00', school_id);

-- Посещаемость
INSERT INTO attendance (student_id, lesson_id, status, marked_by, marked_at, school_id) VALUES
(1, 1, 'presence', 3, NOW(), school_id);

-- Платежи
INSERT INTO payments (student_id, subscription_id, amount, paid_at, created_by, school_id) VALUES
(1, 1, 500, '2025-05-10', 2, school_id);

-- Разовая оплата
INSERT INTO lesson_payments (lesson_id, student_id, amount, paid_at, school_id) VALUES
(1, 1, 500, '2025-05-15', school_id);

-- Финансовый отчёт
INSERT INTO financial_reports (period_start, period_end, total_income, total_expenses, created_at, school_id) VALUES
('2025-05-01', '2025-05-31', 500, 0, NOW(), school_id);

-- Политики оплаты
INSERT INTO teacher_rate_policies (name, description, created_at, school_id) VALUES
('Фикс + за ученика', '2000 фикс + 200 за ученика', NOW(), school_id);

-- Ставки преподавателей
INSERT INTO teacher_rates (teacher_id, policy_id, active_from, active_to, school_id) VALUES
(3, 1, '2025-01-01', '2025-12-31', school_id);

-- Правила расчёта
INSERT INTO teacher_rate_rules (policy_id, rule_type, threshold, base_amount, per_student, percent_of_income, school_id) VALUES
(1, 'fixed', NULL, 2000, NULL, NULL, school_id),
(1, 'per_student', NULL, NULL, 200, NULL, school_id);

END $$;
